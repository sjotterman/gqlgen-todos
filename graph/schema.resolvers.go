package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"math/rand"
	"strconv"

	"github.com/sjotterman/gqlgen-todos/graph/model"
	"github.com/sjotterman/gqlgen-todos/sqlc/food"
)

// CreateRestaurant is the resolver for the createRestaurant field.
func (r *mutationResolver) CreateRestaurant(ctx context.Context, input model.NewRestaurant) (*food.Restaurant, error) {
	newId := int32(rand.Int())
	restaurant := &food.Restaurant{
		Name:        input.Name,
		Description: input.Description,
		ID:          newId,
	}
	r.restaurants = append(r.restaurants, restaurant)
	return restaurant, nil
}

// Restaurants is the resolver for the restaurants field.
func (r *queryResolver) Restaurants(ctx context.Context) ([]food.Restaurant, error) {
	results, err := r.Queries.ListRestaurants(ctx)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// Restaurant is the resolver for the restaurant field.
func (r *queryResolver) Restaurant(ctx context.Context, id string) (*food.Restaurant, error) {
	// TODO: get id passed as number?
	numId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	result, err := r.Queries.GetRestaurant(ctx, int32(numId))
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
