// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package food

import (
	"context"
)

const createRestaurant = `-- name: CreateRestaurant :one
INSERT INTO restaurant (name, description, phone_number)
VALUES ($1, $2, $3)
returning id, name, description, phone_number
`

type CreateRestaurantParams struct {
	Name        string
	Description string
	PhoneNumber string
}

func (q *Queries) CreateRestaurant(ctx context.Context, arg CreateRestaurantParams) (Restaurant, error) {
	row := q.db.QueryRowContext(ctx, createRestaurant, arg.Name, arg.Description, arg.PhoneNumber)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PhoneNumber,
	)
	return i, err
}

const deleteRestaurant = `-- name: DeleteRestaurant :exec
DELETE from restaurant
where id = $1
`

func (q *Queries) DeleteRestaurant(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRestaurant, id)
	return err
}

const getRestaurant = `-- name: GetRestaurant :one
SELECT id, name, description, phone_number from restaurant
where id = $1 LIMIT 1
`

func (q *Queries) GetRestaurant(ctx context.Context, id int32) (Restaurant, error) {
	row := q.db.QueryRowContext(ctx, getRestaurant, id)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PhoneNumber,
	)
	return i, err
}

const listRestaurants = `-- name: ListRestaurants :many
SELECT id, name, description, phone_number from restaurant
ORDER BY name
`

func (q *Queries) ListRestaurants(ctx context.Context) ([]Restaurant, error) {
	rows, err := q.db.QueryContext(ctx, listRestaurants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Restaurant
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRestaurant = `-- name: UpdateRestaurant :one
UPDATE restaurant
set name= $2,
description = $3,
phone_number = $4
where id = $1
returning id, name, description, phone_number
`

type UpdateRestaurantParams struct {
	ID          int32
	Name        string
	Description string
	PhoneNumber string
}

func (q *Queries) UpdateRestaurant(ctx context.Context, arg UpdateRestaurantParams) (Restaurant, error) {
	row := q.db.QueryRowContext(ctx, updateRestaurant,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.PhoneNumber,
	)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PhoneNumber,
	)
	return i, err
}
