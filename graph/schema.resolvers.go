package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"

	"github.com/sjotterman/gqlgen-todos/graph/model"
	"github.com/sjotterman/gqlgen-todos/sqlc/food"
)

// CreateRestaurant is the resolver for the createRestaurant field.
func (r *mutationResolver) CreateRestaurant(ctx context.Context, input model.NewRestaurant) (*food.Restaurant, error) {
	restaurant := food.CreateRestaurantParams{
		Name:        input.Name,
		Description: input.Description,
		PhoneNumber: input.PhoneNumber,
	}
	result, err := r.Queries.CreateRestaurant(ctx, restaurant)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// UpdateRestaurant is the resolver for the updateRestaurant field.
func (r *mutationResolver) UpdateRestaurant(ctx context.Context, id int32, changes model.UpdateRestaurant) (*food.Restaurant, error) {
	existingRestaurant, err := r.Queries.GetRestaurant(ctx, id)
	if err != nil {
		// doesn't exist
		// TODO: handle error
		return nil, err
	}
	// TODO: ensure we prevent editing models that don't exist
	name := changes.Name
	if name == nil {
		name = &existingRestaurant.Name
	}
	description := changes.Description
	if description == nil {
		description = &existingRestaurant.Description
	}
	phoneNumber := changes.PhoneNumber
	if phoneNumber == nil {
		phoneNumber = &existingRestaurant.PhoneNumber
	}
	restaurant := food.UpdateRestaurantParams{
		ID:          id,
		Name:        *name,
		Description: *description,
		PhoneNumber: *phoneNumber,
	}
	result, err := r.Queries.UpdateRestaurant(ctx, restaurant)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

// Restaurants is the resolver for the restaurants field.
func (r *queryResolver) Restaurants(ctx context.Context) ([]food.Restaurant, error) {
	results, err := r.Queries.ListRestaurants(ctx)
	if err != nil {
		return nil, err
	}
	return results, nil
}

// Restaurant is the resolver for the restaurant field.
func (r *queryResolver) Restaurant(ctx context.Context, id int32) (*food.Restaurant, error) {
	result, err := r.Queries.GetRestaurant(ctx, id)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
