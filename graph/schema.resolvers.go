package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"math/rand"

	"github.com/sjotterman/gqlgen-todos/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	rand := rand.Int()
	todo := &model.Todo{
		Text:   input.Text,
		ID:     fmt.Sprintf("T%d", rand),
		UserID: input.UserID,
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// CreateRestaurant is the resolver for the createRestaurant field.
func (r *mutationResolver) CreateRestaurant(ctx context.Context, input model.NewRestaurant) (*model.Restaurant, error) {
	newId := int32(rand.Int())
	restaurant := &model.Restaurant{
		Name:        input.Name,
		Description: input.Description,
		ID:          newId,
	}
	r.restaurants = append(r.restaurants, restaurant)
	return restaurant, nil
}

// TODO: remove this once we set up the schema
// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]model.Todo, error) {
	var todos []model.Todo = []model.Todo{}
	return todos, nil
}

// Restaurants is the resolver for the restaurants field.
func (r *queryResolver) Restaurants(ctx context.Context) ([]model.Restaurant, error) {
	results, err := r.Queries.ListRestaurants(ctx)
	if err != nil {
		return nil, err
	}
	// TODO: figure out how to do this automatically
	var restaurants []model.Restaurant = make([]model.Restaurant, len(results))
	for i, restaurant := range results {
		restaurants[i] = model.Restaurant{
			ID:          restaurant.ID,
			Name:        restaurant.Name,
			Description: restaurant.Description,
			PhoneNumber: restaurant.PhoneNumber,
		}
	}
	return restaurants, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	return &model.User{ID: obj.UserID, Name: "user " + obj.UserID}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
